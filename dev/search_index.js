var documenterSearchIndex = {"docs":
[{"location":"workflow/PSF_generation/#PSF-calculation","page":"PSF calculation","title":"PSF calculation","text":"","category":"section"},{"location":"workflow/PSF_generation/","page":"PSF calculation","title":"PSF calculation","text":"PSFs.psf\nPSFs.apsf","category":"page"},{"location":"workflow/PSF_generation/#PSFs.psf","page":"PSF calculation","title":"PSFs.psf","text":"psf(sz::NTuple, pp::PSFParams; sampling=get_sampling(sz, pp))\n\ncalculates the point spread function (psf), i.e. the image of a single (very small) emitter. Most of the parameters (such as refractive index, numerical aperture, vacuum wavelength, aberrations etc.) are hidden in the parameter structure argument pp, which should be generated via the PSFParams() constructor. See `PSFParams() for details.\n\nSee also:\n\napsf():  calculates the underlying aplitude point spread function (apsf)\n\nExample:\n\njulia> pp = PSFParams(500.0,1.4,1.52);\njulia> p = psf((128,128,128),pp; sampling=(50,50,100)); #; \n\n\n\n\n\n","category":"function"},{"location":"workflow/PSF_generation/#PSFs.apsf","page":"PSF calculation","title":"PSFs.apsf","text":"apsf(sz::NTuple, pp::PSFParams; sampling=nothing, center_kz=false)\n\ndispatches to various amplitude point spread function calculation routines. Note that the method entry in pp defines which calculation method to be used. Alternatively a different method can be chosen like this: apsf(::Type{MethodShell}, sz, ..).\n\nArguments:\n\nsz: NTuple of size to generate\npp: PSF parameter structure, also contains the dtype. See PSFParam() for details\nsampling: NTuple for pixel pitch information\ncenter_kz: if true, the McCutchen pupil will be centered along the kz direction. This is important to be able to apply a consecutive resampling without errors.            However, the phase values are then not correct, which does not matter for intensity PSFs.\n\nSee also:\n\npsf():    calculates the intensity point spread function (psf) by taking (sum along field components of) the absolute square of the corresponding apsf. \n\nExample:\n\njulia> pp = PSFParams(500.0,1.4,1.52)\njulia> p = apsf((128,128,128),pp; sampling=(50,50,100));\n\n\n\n\n\n","category":"function"},{"location":"workflow/PSF_parameters/#PSF-parameters","page":"PSF parameters","title":"PSF parameters","text":"","category":"section"},{"location":"workflow/PSF_parameters/","page":"PSF parameters","title":"PSF parameters","text":"PSFs.PSFParams\nPSFs.PSFParams(my_λ=500, my_NA=1.2, my_n=1.33; pol=pol_scalar, dtype=Float32, mode=ModeWidefield, \n                    aplanatic = aplanatic_detection, method=MethodPropagateIterative, FFTPlan=nothing,\n                    aberrations=Aberrations(), pixelshape=nothing)","category":"page"},{"location":"workflow/PSF_parameters/#PSFs.PSFParams","page":"PSF parameters","title":"PSFs.PSFParams","text":"PSFParams\n\nThis structure stores all the general parameters needed to calculate the point spread function. Only pixel-pitch and image size information is handles seperately.\n\nStructure Members:\n\nλ:            Vacuum wavelength\nNA:           numerical aperture\nn:            refractive index of the embedding AND immersion medium\ndtype:        real-valued data type to generate PSF for\nmode:         microscopy mode to calculate PSF for. See the constructor PSFParams() for more details.\npolarization: a function calculating the polarization from a given Tuple of relative-k pupil vectors\naplanatic:    aplanatic factor. Provided as a function of angle θ\nmethod:       the method of calculation\nFFTPlan:      information on how to calculate the FFTW plan\n\nSee also:\n\nPSFParams()\n\nExample:\n\njulia> using FFTW, PSFs\n\njulia> ppm = PSFParams(0.580, 1.4, 1.518;pol=pol_scalar,method=PSFs.MethodSincR, aberrations= aberr, FFTPlan=FFTW.MEASURE)\nPSFParams(0.58, 1.4, 1.518, Float32, ModeWidefield, PSFs.pol_scalar, PSFs.var\"#42#43\"(), PSFs.MethodSincR, 0x00000000, nothing, nothing)\n\n\n\n\n\n\n","category":"type"},{"location":"workflow/PSF_parameters/#PSFs.PSFParams-2","page":"PSF parameters","title":"PSFs.PSFParams","text":"PSFParams(λ=0.5, NA=1.2, n=1.33; pol=pol_scalar, dtype=Float32, mode=ModeWidefield, \naplanatic = aplanatic_detection, method=MethodPropagateIterative, FFTPlan=nothing,\naberrations=Aberrations(), pixelshape=nothing)\n\ncreates the PSFParams structure via this constructor.\n\nArguments:\n\nλ:            Vacuum wavelength (same units as sampling, default is 0.5 µm)\nNA:           numerical aperture\nn:            refractive index of the embedding AND immersion medium\npol: a function calculating the polarization from a given Tuple of relative-k pupil vectors\ndtype:        real-valued data type to generate PSF for\nmode:         microscopy mode to calculate PSF for ::PSFMode. Currently only ModeWidefield is implemented\nmethod:         microscopy mode to calculate PSF for                valid options are currently:               + MethodPropagate: Angulare spectrum propagation. This version does NOT account for wrap around problems yielding problems at larger out-of-focus distances               + MethodPropagateIterativ (default): Angulare spectrum propagation accounting from wrap-around problems in each propagation step by applying a perfectly matched layer (PML).               + MethodShell: Angulare spectrum propagation with a slightly different calculation order. This version does NOT account for wrap around problems yielding problems at larger out-of-focus distances               + MethodSincR: Based on first calculating a SincR function in real space and applying consecutive filtering steps. It accounts for wrap around problems but requires a quite high sampling along the Z direction.\naplanatic:    aplanatic factor. Provided as a function of angle θ. \nFFTPlan:      information on how to calculate the FFTW plan. Default: nothing (using FFTW.ESTIMATE)\n\nExample:\n\njulia> using FFTW, PSFs\n\njulia> ppm = PSFParams(0.58, 1.4, 1.518;pol=pol_scalar,method=PSFs.MethodSincR, aberrations= aberr, FFTPlan=FFTW.MEASURE)\nPSFParams(0.58, 1.4, 1.518, Float32, ModeWidefield, PSFs.pol_scalar, PSFs.var\"#42#43\"(), PSFs.MethodSincR, 0x00000000, nothing, nothing)\n\n\n\n\n\n\n","category":"type"},{"location":"workflow/PSF_parameters/#Defining-Aberrations","page":"PSF parameters","title":"Defining Aberrations","text":"","category":"section"},{"location":"workflow/PSF_parameters/","page":"PSF parameters","title":"PSF parameters","text":"PSFs.Aberrations","category":"page"},{"location":"workflow/PSF_parameters/#PSFs.Aberrations","page":"PSF parameters","title":"PSFs.Aberrations","text":"Aberrations\ndefining Zernike phase aberrations via a list of indices and coefficients and an indexing style.\n\n\n\n\n\n","category":"type"},{"location":"function_references/all_functions/#List-of-Functions","page":"List of Functions","title":"List of Functions","text":"","category":"section"},{"location":"function_references/all_functions/#Parameters","page":"List of Functions","title":"Parameters","text":"","category":"section"},{"location":"function_references/all_functions/","page":"List of Functions","title":"List of Functions","text":"see Workflow","category":"page"},{"location":"function_references/all_functions/#PSF-generation","page":"List of Functions","title":"PSF generation","text":"","category":"section"},{"location":"function_references/all_functions/","page":"List of Functions","title":"List of Functions","text":"see Workflow","category":"page"},{"location":"function_references/all_functions/#Pupils","page":"List of Functions","title":"Pupils","text":"","category":"section"},{"location":"function_references/all_functions/","page":"List of Functions","title":"List of Functions","text":"PSFs.pupil_θ(sz, pp::PSFParams, sampling)\nPSFs.pupil_ϕ(sz, pp::PSFParams, sampling)\naplanatic_factor(sz, pp::PSFParams, sampling)\npupil_xyz(sz, pp, sampling=nothing)\nPSFs.field_xyz(sz, pp, sampling)\nPSFs.field_xy_to_xyz(field,pp,sampling)\nPSFs.field_pupil\nPSFs.get_propagator(sz,pp,sampling)\nPSFs.get_propagator_gradient(prop_phase, scalar, xy_scale)\nPSFs.apply_propagators(pupil, z_planes, pp::PSFParams; sampling=nothing) \nPSFs.get_zernike_pupil_phase(sz, pp, sampling) \nPSFs.get_zernike_pupil(sz, pp, sampling) ","category":"page"},{"location":"function_references/all_functions/#PSFs.pupil_θ-Tuple{Any, PSFParams, Any}","page":"List of Functions","title":"PSFs.pupil_θ","text":"pupil_θ(sz, pp::PSFParams, sampling)\n\nreturns the θ angle (to the optical axis) in the sample space as a pupil array.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.pupil_ϕ-Tuple{Any, PSFParams, Any}","page":"List of Functions","title":"PSFs.pupil_ϕ","text":"pupil_ϕ(sz, pp::PSFParams, sampling)\n\nreturns the azimuthal angle ϕ  in the sample space as a pupil array.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.aplanatic_factor-Tuple{Any, PSFParams, Any}","page":"List of Functions","title":"PSFs.aplanatic_factor","text":"aplanatic_factor(sz, pp::PSFParams, sampling)\n\nreturns the aplanatic factor as specified in pp.aplanatic as a pupil array.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.pupil_xyz","page":"List of Functions","title":"PSFs.pupil_xyz","text":"pupil_xyz(sz, pp, sampling=nothing)\n\ncreates a pupil with electric field distributions in XYZ. Returns a 4D dataset with the electric field components along the 4th dimension.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.field_xyz-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.field_xyz","text":"field_xyz(sz, pp, sampling)\n\ncreates a 2D pupil field behind the lens, containing Ex, EY and E_z.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.field_xy_to_xyz-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.field_xy_to_xyz","text":"field_xy_to_xyz(field,pp,sampling)\n\nconverts a 2D field at the pupil to a 2D field behind the lens, containing Ex, EY and E_z.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.field_pupil","page":"List of Functions","title":"PSFs.field_pupil","text":"field_pupil(sz, pp, sampling)\n\nreturns the pupil polarization as a 4D array with the XY polarization components stacked along the 4th dimension.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.get_propagator-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.get_propagator","text":"get_propagator(sz,pp,sampling)\n\nretrieves the propagator phase, prpagating a single Z-slice.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.get_propagator_gradient-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.get_propagator_gradient","text":"get_propagator_gradient(prop_phase, scalar, xy_scale)\n\ncalculates the gradient of the propagator along the X and Y directions of the pupil.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.apply_propagators-Tuple{Any, Any, PSFParams}","page":"List of Functions","title":"PSFs.apply_propagators","text":"apply_propagators(pupil, z_planes, pp::PSFParams; sampling=nothing)\n\npropagates a given pupil by a number of z_planes (almost) symmetrically in both directions. The result is a stack of propagated pupils. The slice-to-slice propagator is obtained via the get_propagator method.\n\nSee also:\n\nget_propagator\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.get_zernike_pupil_phase-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.get_zernike_pupil_phase","text":"get_zernike_pupil_phase(sz, pp, sampling)\n\ncalculates the phases in the pupil for a given set of aberrations as defined by J and coefficients. By default this follows the OSA nomenclature. See the help file of ZernikePolynomials.jl for more information. The pupil phase (up to the pupil border as defined by the NA in pp) is returned.\n\nArguments:\n\nsz:  size of the real-space array\npp:  PSF parameter structure\nsampling: pixelpitch in real space as NTuple\n\nExample:\n\njulia> using PSFs, FFTW\n\njulia> aberr = PSFs.Aberrations([Zernike_Spherical, Zernike_ObliqueAstigmatism],[0.1, 0.2])\nAberrations([12, 3], [0.1, 0.2], :OSA)\n\njulia> pp = PSFParams(580.0, 1.4, 1.518; aberrations=aberr)\nPSFParams(580.0, 1.4, 1.518, Float32, ModeWidefield, PSFs.pol_scalar, PSFs.var\"#42#43\"(), PSFs.MethodPropagateIterative, nothing, Aberrations([12, 3], [0.1, 0.2], :OSA), nothing)\n\njulia> sz = (10,10,64)\n(10, 10, 64)\n\njulia> sampling=(190,190,100)\n(190, 190, 100)\n\njulia> PSFs.get_zernike_pupil_phase(sz,pp,sampling)\n10×10 Matrix{Float64}:\n 0.0   0.0         0.0         0.0         0.0         0.0         0.0         0.0         0.0         0.0\n 0.0   0.0         0.0         0.533599    0.202003   -0.0206203  -0.170662   -0.21173     0.0         0.0\n 0.0   0.0         0.477274    0.186398    0.0287554  -0.104828   -0.250743   -0.3726     -0.361221    0.0\n 0.0   0.533599    0.186398    0.0937363   0.0736565   0.016983   -0.112676   -0.278928   -0.3726     -0.21173\n 0.0   0.202003    0.0287554   0.0736565   0.154747    0.162853    0.0615812  -0.112676   -0.250743   -0.170662\n 0.0  -0.0206203  -0.104828    0.016983    0.162853    0.223607    0.162853    0.016983   -0.104828   -0.0206203\n 0.0  -0.170662   -0.250743   -0.112676    0.0615812   0.162853    0.154747    0.0736565   0.0287554   0.202003\n 0.0  -0.21173    -0.3726     -0.278928   -0.112676    0.016983    0.0736565   0.0937363   0.186398    0.533599\n 0.0   0.0        -0.361221   -0.3726     -0.250743   -0.104828    0.0287554   0.186398    0.477274    0.0\n 0.0   0.0         0.0        -0.21173    -0.170662   -0.0206203   0.202003    0.533599    0.0         0.0\n\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.get_zernike_pupil-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.get_zernike_pupil","text":"get_zernike_pupil(sz, pp, sampling)\n\ncalculates the phases in the pupil for a given set of aberrations as defined by J and coefficients. By default this follows the OSA nomenclature. See the help file of ZernikePolynomials.jl for more information. The complex-valued pupil (up to the pupil border as defined by the NA in pp) is returned.\n\nArguments:\n\nsz:  size of the real-space array\npp:  PSF parameter structure\nsampling: pixelpitch in real space as NTuple\n\nExample:\n\njulia> using PSFs, FFTW\n\njulia> aberr = PSFs.Aberrations([Zernike_Spherical, Zernike_ObliqueAstigmatism],[0.1, 0.2])\nAberrations([12, 3], [0.1, 0.2], :OSA)\n\njulia> pp = PSFParams(580.0, 1.4, 1.518; aberrations=aberr)\nPSFParams(580.0, 1.4, 1.518, Float32, ModeWidefield, PSFs.pol_scalar, PSFs.var\"#42#43\"(), PSFs.MethodPropagateIterative, nothing, Aberrations([12, 3], [0.1, 0.2], :OSA), nothing)\n\njulia> sz = (10,10,64)\n(10, 10, 64)\n\njulia> sampling=(190,190,100)\n(190, 190, 100)\n\njulia> PSFs.get_zernike_pupil(sz,pp,sampling)\n10×10 Matrix{ComplexF64}:\n 1.0+0.0im        1.0+0.0im               1.0+0.0im             1.0+0.0im               1.0+0.0im       …          1.0+0.0im             1.0+0.0im               1.0+0.0im             1.0+0.0im\n 1.0+0.0im        1.0+0.0im               1.0+0.0im       -0.977799-0.209546im     0.297025+0.95487im         0.478105-0.878303im   0.238146-0.971229im          1.0+0.0im             1.0+0.0im\n 1.0+0.0im        1.0+0.0im         -0.989823+0.142305im   0.389073+0.921207im     0.983723+0.179694im     -0.00466964-0.999989im  -0.696362-0.717691im    -0.643318-0.765599im        1.0+0.0im\n 1.0+0.0im  -0.977799-0.209546im     0.389073+0.921207im   0.831518+0.555499im     0.894807+0.446453im        0.759688-0.650288im  -0.180764-0.983527im    -0.696362-0.717691im   0.238146-0.971229im\n 1.0+0.0im   0.297025+0.95487im      0.983723+0.179694im   0.894807+0.446453im     0.563395+0.826187im        0.926073+0.377344im   0.759688-0.650288im  -0.00466964-0.999989im   0.478105-0.878303im\n 1.0+0.0im   0.991619-0.129199im     0.790818-0.612051im   0.994312+0.106505im     0.520607+0.853797im  …     0.520607+0.853797im   0.994312+0.106505im     0.790818-0.612051im   0.991619-0.129199im\n 1.0+0.0im   0.478105-0.878303im  -0.00466964-0.999989im   0.759688-0.650288im     0.926073+0.377344im        0.563395+0.826187im   0.894807+0.446453im     0.983723+0.179694im   0.297025+0.95487im\n 1.0+0.0im   0.238146-0.971229im    -0.696362-0.717691im  -0.180764-0.983527im     0.759688-0.650288im        0.894807+0.446453im   0.831518+0.555499im     0.389073+0.921207im  -0.977799-0.209546im\n 1.0+0.0im        1.0+0.0im         -0.643318-0.765599im  -0.696362-0.717691im  -0.00466964-0.999989im        0.983723+0.179694im   0.389073+0.921207im    -0.989823+0.142305im        1.0+0.0im\n 1.0+0.0im        1.0+0.0im               1.0+0.0im        0.238146-0.971229im     0.478105-0.878303im        0.297025+0.95487im   -0.977799-0.209546im          1.0+0.0im             1.0+0.0im\n\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#Polarization","page":"List of Functions","title":"Polarization","text":"","category":"section"},{"location":"function_references/all_functions/","page":"List of Functions","title":"List of Functions","text":"These functions can be conveniently supplied to PSFParams() via the named argument polarization ","category":"page"},{"location":"function_references/all_functions/","page":"List of Functions","title":"List of Functions","text":"pol_scalar\npol_scalar_spiral\npol_x\npol_y\npol_circ\npol_circ_spiral","category":"page"},{"location":"function_references/all_functions/#PSFs.pol_scalar","page":"List of Functions","title":"PSFs.pol_scalar","text":"pol_scalar(T, xypos)\n\nignores polarization aspects in the calculation but calculates only based on (high-NA) scalar theory. This is a lot faster but not as accurate.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.pol_scalar_spiral","page":"List of Functions","title":"PSFs.pol_scalar_spiral","text":"pol_scalar_spiral(T, xypos)\n\nignores polarization aspects in the calculation but calculates only based on (high-NA) scalar theory. This version still includes a (scalar) phase spiral. This is a lot faster but not as accurate.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.pol_x","page":"List of Functions","title":"PSFs.pol_x","text":"pol_x(T, xypos)\n\nassumes x-polarization in illumination or an x-oriented polarizer in detection.  In a high-NA objective this is converted into XYZ electric fields at the focus.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.pol_y","page":"List of Functions","title":"PSFs.pol_y","text":"pol_y(T, xypos)\n\nassumes y-polarization in illumination or an x-oriented polarizer in detection.  In a high-NA objective this is converted into XYZ electric fields at the focus.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.pol_circ","page":"List of Functions","title":"PSFs.pol_circ","text":"pol_circ(T, xypos)\n\nassumes circular polarization in illumination or an x-oriented polarizer in detection.  In a high-NA objective this is converted into XYZ electric fields at the focus.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.pol_circ_spiral","page":"List of Functions","title":"PSFs.pol_circ_spiral","text":"pol_circ_spiral(T, xypos)\n\nassumes circular polarization in illumination or an x-oriented polarizer in detection.  This version includes phase spiral defining the local (xypos-dependent) phase of both x and y polarization.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#Aplanatic-factors","page":"List of Functions","title":"Aplanatic factors","text":"","category":"section"},{"location":"function_references/all_functions/","page":"List of Functions","title":"List of Functions","text":"aplanatic_detection\naplanatic_illumination\naplanatic_const\naplanatic_illumination_flux","category":"page"},{"location":"function_references/all_functions/#PSFs.aplanatic_detection","page":"List of Functions","title":"PSFs.aplanatic_detection","text":"aplanatic_detection = (θ) -> sqrt.(max.(0,cos.(θ)))\n\nThis is the aplanatic factor typically used in detection of fluorescence of (randomly oriented) fluorophores. \n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.aplanatic_illumination","page":"List of Functions","title":"PSFs.aplanatic_illumination","text":"aplanatic_illumination = (θ) -> sqrt.(max.(0,cos.(θ)))\n\nThis is the aplanatic factor typically used in illumination of (randomly oriented) fluorophores. Note that it is identical to detection.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.aplanatic_const","page":"List of Functions","title":"PSFs.aplanatic_const","text":"aplanatic_const = (θ) -> one.(eltype(θ))\n\nThis is a constant aplanatic factor\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#PSFs.aplanatic_illumination_flux","page":"List of Functions","title":"PSFs.aplanatic_illumination_flux","text":"aplanatic_illumination_flux = (θ) -> max.(0,cos.(θ))\n\nThis refers the aplanatic factor if interested in the flux through a detector perpendicular to the optical axis.\n\n\n\n\n\n","category":"function"},{"location":"function_references/all_functions/#Utilities","page":"List of Functions","title":"Utilities","text":"","category":"section"},{"location":"function_references/all_functions/","page":"List of Functions","title":"List of Functions","text":"PSFs.amp_to_int(field)\nPSFs.has_z_symmetry(pp::PSFParams)\nPSFs.get_Abbe_limit(pp::PSFParams)\nPSFs.get_required_amp_sampling(sz::NTuple, pp::PSFParams)\nPSFs.get_Ewald_sampling(sz::NTuple, pp::PSFParams)\nPSFs.get_McCutchen_kz_center(sz, pp::PSFParams, sampling)\nPSFs.limit_kz(ft_shell, pp::PSFParams, sampling)\nPSFs.sinc_r(sz::NTuple, pp::PSFParams; sampling=nothing)\nPSFs.jinc_r_2d(sz::NTuple, pp::PSFParams; sampling=nothing)\nPSFs.my_disc(sz, pp)\nPSFs.iftz(arr)\nPSFs.theta_z(sz)\nPSFs.k_0(pp::PSFParams)\nPSFs.k_pupil(pp::PSFParams)\nPSFs.k_dz(pp::PSFParams)\nPSFs.k_scale(sz, pp::PSFParams, sampling)\nPSFs.k_pupil_pos(sz, pp::PSFParams, sampling)\nPSFs.k_0_pos(sz, pp::PSFParams, sampling)\nPSFs.k_r(sz, pp::PSFParams, sampling)\nPSFs.k_xy(sz,pp,sampling)\nPSFs.k_xy_rel_pupil(sz,pp,sampling)\nPSFs.check_amp_sampling_xy(sz, pp,sampling)\nPSFs.check_amp_sampling_z(sz, pp,sampling)\nPSFs.check_amp_sampling(sz, pp,sampling)\nPSFs.check_amp_sampling_sincr(sz, pp,sampling)","category":"page"},{"location":"function_references/all_functions/#PSFs.amp_to_int-Tuple{Any}","page":"List of Functions","title":"PSFs.amp_to_int","text":"amp_to_int(field)\n\nconverts a complex-valued amplitude field to intensity via abs2. and summing over the 4th dimension.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.has_z_symmetry-Tuple{PSFParams}","page":"List of Functions","title":"PSFs.has_z_symmetry","text":"has_z_symmetry(pp::PSFParams)\n\nchecks whether the point spread function is expected to be symmetric along the z-direction. Currently this is defined by the aberration list being empty.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.get_Abbe_limit-Tuple{PSFParams}","page":"List of Functions","title":"PSFs.get_Abbe_limit","text":"get_Abbe_limit(pp::PSFParams)\n\nreturns the Abbe limit of incoherent imaging in real space as a Tuple with 3 entries. Note that the coherent limit needs only a factor of two less sampling, as long as no intensity is calculated. This allows upsampling right before calculating intensities.\n\nSee also:\n\ngetrequiredamp_sampling()\n\nExample:\n\njulia> using PSFs\n\njulia> pp = PSFParams(580.0, 1.4, 1.518)\nPSFParams(580.0, 1.4, 1.518, Float32, ModeWidefield, PSFs.pol_scalar, PSFs.var\"#42#43\"(), PSFs.MethodPropagateIterative, nothing, Aberrations(Any[], Any[], :OSA), nothing)\n\njulia> PSFs.get_Abbe_limit(pp)\n(191.04085f0, 191.04085f0, 622.8464f0)\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.get_required_amp_sampling-Tuple{Tuple{Vararg{T, N}} where {N, T}, PSFParams}","page":"List of Functions","title":"PSFs.get_required_amp_sampling","text":"get_required_amp_sampling(sz::NTuple, pp::PSFParams)\n\nreturns the necessary sampling (in real space) for sampling amplitudes. This is almost corresponding to the Abbe limit. Factor of two less because of amplitude but twice because of the Nyquist theorem.  However, this is slight modified by requiring slightly higher sampling (one empty pixel on each side of Fourier space) to stay clear of ambiguities.\n\nSee also:\n\ngetAbbelimit()\n\nExample:\n\njulia> using PSFs\n\njulia> pp = PSFParams(580.0, 1.4, 1.518)\nPSFParams(580.0, 1.4, 1.518, Float32, ModeWidefield, PSFs.pol_scalar, PSFs.var\"#42#43\"(), PSFs.MethodPropagateIterative, nothing, Aberrations(Any[], Any[], :OSA), nothing)\n\njulia> sz = (256,256,64)\n(256, 256, 64)\n\njulia> PSFs.get_required_amp_sampling(sz,pp)\n(188.05583f0, 188.05583f0, 219.73679f0)\n\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.get_Ewald_sampling-Tuple{Tuple{Vararg{T, N}} where {N, T}, PSFParams}","page":"List of Functions","title":"PSFs.get_Ewald_sampling","text":"get_Ewald_sampling(sz::NTuple, pp::PSFParams)\n\nreturns the required minimum sampling for the calculation of a full Ewald sphere.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.get_McCutchen_kz_center-Tuple{Any, PSFParams, Any}","page":"List of Functions","title":"PSFs.get_McCutchen_kz_center","text":"get_McCutchen_kz_center(ft_shell, pp::PSFParams, sampling)\n\ncalculates the (rounded) pixels position half way between both, the kz-borders of the McCutchen pupil to extract from the full sized Ewald sphere. The pixel z position is returned together with the corresponding kz position.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.limit_kz-Tuple{Any, PSFParams, Any}","page":"List of Functions","title":"PSFs.limit_kz","text":"limit_k_z(ft_shell, pp::PSFParams, sampling)\n\nlimits the k_z range of the ewald-sphere. returns the extracted region and the new sampling\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.sinc_r-Tuple{Tuple{Vararg{T, N}} where {N, T}, PSFParams}","page":"List of Functions","title":"PSFs.sinc_r","text":"sinc_r(sz::NTuple, pp::PSFParams; sampling=nothing)\n\ncalculates the 3-dimensional sinc(abs(position)) scaled such that the Fourier transformation yields the k-sphere. Note that for this to work the sampling needs to be sufficient, which may be problematic especially along the z-direction. This can be checked with the help of the get_Ewald_sampling() function.\n\nSee also:\n\ngetEwaldsampling()\njincr2d\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.jinc_r_2d-Tuple{Tuple{Vararg{T, N}} where {N, T}, PSFParams}","page":"List of Functions","title":"PSFs.jinc_r_2d","text":"jinc_r_2d(sz::NTuple, pp::PSFParams; sampling=nothing)\n\ncalculates a jinc(abs(position)) function in 2D such that its Fourier transform corresponds to the disk-shaped pupil (indcluding the effect ot the numerical aperture).\n\nSee also:\n\nsinc_r()\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.my_disc-Tuple{Any, Any}","page":"List of Functions","title":"PSFs.my_disc","text":"my_disc(sz, pp)\n\ncreates a disc such that there is no overalp upon wrap-around, when convolving it with itself on this grid. This is the radius where there is no overlap. However, in the cornes of the calculation, the results are not 100% accurate as something is missing.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.iftz-Tuple{Any}","page":"List of Functions","title":"PSFs.iftz","text":"iftz(arr)\n\ninverse Fourier transform only along the 3rd dimension (kz).\n\nArguments:\n\narr:  array to transform along kz\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.theta_z-Tuple{Any}","page":"List of Functions","title":"PSFs.theta_z","text":"theta_z(sz)\n\na θ function along the z direction, being one for z positon > 0 and zero elsewhere.\n\nArguments:\n\nsz:  size of the array\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.k_0-Tuple{PSFParams}","page":"List of Functions","title":"PSFs.k_0","text":"k_0(pp::PSFParams)\n\nk in the medium as n/lambda.   (1/space units\n\nArguments:\n\npp:  PSF parameter structure\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.k_pupil-Tuple{PSFParams}","page":"List of Functions","title":"PSFs.k_pupil","text":"k_pupil(pp::PSFParams)\n\nmaxim radial k-coordinate (1/space units) where the pupil ends\n\nArguments:\n\npp:  PSF parameter structure\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.k_dz-Tuple{PSFParams}","page":"List of Functions","title":"PSFs.k_dz","text":"k_dz(pp::PSFParams)\n\nrelative kz range from pupil boarder to top of Ewald sphere\n\nArguments:\n\npp:  PSF parameter structure\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.k_scale-Tuple{Any, PSFParams, Any}","page":"List of Functions","title":"PSFs.k_scale","text":"k_scale(sz,pp,sampling)\npixelpitch (as NTuple) in k-space\n\nsz:  size of the real-space array\npp:  PSF parameter structure\nsampling: pixelpitch in real space as NTuple\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.k_pupil_pos-Tuple{Any, PSFParams, Any}","page":"List of Functions","title":"PSFs.k_pupil_pos","text":"k_pupil_pos(sz, pp::PSFParams, sampling)\n\nreturns the X and Y position of the pupil border in reciprocal space pixels.\n\nArguments:\n\nsz:  size of the real-space array\npp:  PSF parameter structure\nsampling: pixelpitch in real space as NTuple\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.k_0_pos-Tuple{Any, PSFParams, Any}","page":"List of Functions","title":"PSFs.k_0_pos","text":"k_0_pos(sz, pp::PSFParams, sampling)\n\nreturns the X and Y position of the Ewald-sphere border in reciprocal space pixels.\n\nArguments:\n\nsz:  size of the real-space array\npp:  PSF parameter structure\nsampling: pixelpitch in real space as NTuple\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.k_r-Tuple{Any, PSFParams, Any}","page":"List of Functions","title":"PSFs.k_r","text":"k_r(sz, pp::PSFParams, sampling)\n\nreturns an array of radial k coordinates, |k_xy|\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.k_xy-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.k_xy","text":"k_xy(sz,pp,sampling)\n\nyields a 2D array with each entry being a 2D Tuple.\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.k_xy_rel_pupil-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.k_xy_rel_pupil","text":"k_xy_rel_pupil(sz,pp,sampling)\n\nreturns an array of relative distance to the pupil border\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.check_amp_sampling_xy-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.check_amp_sampling_xy","text":"check_amp_sampling_xy(sz, pp,sampling)\n\nissues a warning if the amplitude sampling along X and Y is not within the required limits.\n\nSee also:\n\ngetAbbelimit()\ngetrequiredamp_sampling()\ncheckampsampling()\ncheckampsampling_z()\n\nArguments:\n\nsz:  size of the real-space array\npp:  PSF parameter structure\nsampling: pixelpitch in real space as NTuple\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.check_amp_sampling_z-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.check_amp_sampling_z","text":"check_amp_sampling_z(sz, pp,sampling)\n\nissues a warning if the amplitude sampling along Z is not within the required limits.\n\nSee also:\n\ngetAbbelimit()\ngetrequiredamp_sampling()\ncheckampsampling_xy()\ncheckampsampling()\n\nArguments:\n\nsz:  size of the real-space array\npp:  PSF parameter structure\nsampling: pixelpitch in real space as NTuple\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.check_amp_sampling-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.check_amp_sampling","text":"check_amp_sampling(sz, pp,sampling)\n\nissues a warning if the amplitude sampling (X,Y and Z) is not within the required limits.\n\nSee also:\n\ngetAbbelimit()\ngetrequiredamp_sampling()\ncheckampsampling_xy()\ncheckampsampling_z()\n\nArguments:\n\nsz:  size of the real-space array\npp:  PSF parameter structure\nsampling: pixelpitch in real space as NTuple\n\n\n\n\n\n","category":"method"},{"location":"function_references/all_functions/#PSFs.check_amp_sampling_sincr-Tuple{Any, Any, Any}","page":"List of Functions","title":"PSFs.check_amp_sampling_sincr","text":"check_amp_sampling_sincr(sz, pp,sampling)\n\nissues a warning if the amplitude sampling (X,Y and Z) is not within the required limits for the SincR method, as this requires sampling the Ewald-sphere according to Nyquist.\n\nSee also:\n\ngetAbbelimit()\ngetrequiredamp_sampling()\ncheckampsampling()\ngetEwaldsampling()\n\nArguments:\n\nsz:  size of the real-space array\npp:  PSF parameter structure\nsampling: pixelpitch in real space as NTuple\n\n\n\n\n\n","category":"method"},{"location":"#PSfs.jl-Documentation","page":"PSFs.jl","title":"PSfs.jl Documentation","text":"","category":"section"},{"location":"","page":"PSFs.jl","title":"PSFs.jl","text":"This toolbox aims at fast and accurate calculations of point spread functions (PSFs) as used in optics. It is particularyl suited for high numerical aperture PSfs and vectorial aspects of the electric field.  Aplanatic factors as for aplanatic optical systems fullfilling the Abbe sine condition are accounted for as well as various pupil properties can be supplied.  Different modes of calculation are possible and more will be added in the future. Aberrations can be specified in terms of Zernike coefficients.","category":"page"}]
}
